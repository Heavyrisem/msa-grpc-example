// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "hero/hero.proto" (package "hero", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HeroesService } from "./hero";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Hero } from "./hero";
import type { HeroById } from "./hero";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hero.HeroesService
 */
export interface IHeroesServiceClient {
    /**
     * @generated from protobuf rpc: FindOne(hero.HeroById) returns (hero.Hero);
     */
    findOne(input: HeroById, options?: RpcOptions): UnaryCall<HeroById, Hero>;
}
/**
 * @generated from protobuf service hero.HeroesService
 */
export class HeroesServiceClient implements IHeroesServiceClient, ServiceInfo {
    typeName = HeroesService.typeName;
    methods = HeroesService.methods;
    options = HeroesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FindOne(hero.HeroById) returns (hero.Hero);
     */
    findOne(input: HeroById, options?: RpcOptions): UnaryCall<HeroById, Hero> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HeroById, Hero>("unary", this._transport, method, opt, input);
    }
}
